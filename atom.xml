<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LIGENE</title>
  
  <subtitle>Notes of Bioinformatics and Genomics</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.ligene.cn/"/>
  <updated>2017-09-03T06:00:00.000Z</updated>
  <id>http://blog.ligene.cn/</id>
  
  <author>
    <name>adong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.ligene.cn/2018/01/03/hello-world/"/>
    <id>http://blog.ligene.cn/2018/01/03/hello-world/</id>
    <published>2018-01-02T23:55:20.663Z</published>
    <updated>2017-09-03T06:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://blog.ligene.cn/categories/Tools/"/>
    
    
      <category term="Hexo" scheme="http://blog.ligene.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>文献检索</title>
    <link href="http://blog.ligene.cn/2017/10/13/references/"/>
    <id>http://blog.ligene.cn/2017/10/13/references/</id>
    <published>2017-10-13T08:40:46.000Z</published>
    <updated>2017-10-13T07:45:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>科研似乎是比较高大上的词，但英文“research”更能表达它的意思，就是反复(re)搜索(search)文献。大牛牛顿都说他的成功是站在巨人的肩膀上(Stand on the shoulders of giants)。从事科研都要先查文献，看看别人做了什么或先学习怎么做，运气好的，如获诺奖的菁蒿素就是屠youyou从我国传统医学文化宝库的古籍堆里找到的秘方，才被提取用于疟疾的治疗。<br><a id="more"></a></p><h2 id="一、外文文献"><a href="#一、外文文献" class="headerlink" title="一、外文文献"></a>一、外文文献</h2><h3 id="1-Google-Scholar-scholar-google-com"><a href="#1-Google-Scholar-scholar-google-com" class="headerlink" title="1. Google Scholar (scholar.google.com)"></a>1. Google Scholar (scholar.google.com)</h3><p>Google Scholar是学术文献的免费搜索工具，可查找到各种学术文献，包括期刊论文、学位论文、书籍、预印本、文摘和技术报告等。曾经它是我最喜欢用的文献检索工具，方便、准确，能找到最新刚online的文献，也可以找到非常古老的资料。但现在国内被封了，哎，就此略去。</p><h3 id="2-NCBI-PubMed-www-ncbi-nlm-nih-gov-pubmed"><a href="#2-NCBI-PubMed-www-ncbi-nlm-nih-gov-pubmed" class="headerlink" title="2. NCBI PubMed (www.ncbi.nlm.nih.gov/pubmed)"></a>2. NCBI PubMed (www.ncbi.nlm.nih.gov/pubmed)</h3><p>PubMed是美国生物技术信息中心(NCBI)维护的文献数据库。PubMed收录来自全世界发行的超过5000多种生物医学杂志的文献摘要，最早可以追溯到1950s.<br>PubMed的文献检索很简单，打开NCBI首页，在检索框左边的下拉栏中找到PubMed，然后在检索框中输入你要搜索的关键词，如搜索“HBB”，就可以看到所有hemoglobin蛋白相关的文献。<br>但一般会出现很多文献，下面简要介绍一下pubmed文献检索的条件限制方法：</p><ul><li>使用限定词(fields)查询:<br>如只看Nature杂志的文章可以在关键词后再输入”Nature[journal]”, 同理如果你对只对关键词中含有酵母菌的文章感兴趣，可以试试”Yeast[keyword]”。<br>其它一些常用的限定词简写：<blockquote><p>TIAB: 表示Title/Abstract，搜索题目或摘要中出现的文章<br>AU: 表示作者，按作者搜索文章<br>TA: 表示杂志，按杂志搜索文章<br>DP: 表示出版日期<br>AD: 表示Affiliation(工作单位)</p></blockquote></li></ul><p>更多的限定词可以查看网址：<a href="https://www.ncbi.nlm.nih.gov/books/NBK3827/#_pubmedhelp_Search_Field_Descriptions_and_" target="_blank" rel="noopener">https://www.ncbi.nlm.nih.gov/books/NBK3827/#_pubmedhelp_Search_Field_Descriptions_and_</a></p><ul><li>使用过滤(filters)选项查询:<br>检索结果页面左边还可以限制条件，比如只要看可以全文免费下载的文献，在左边的限制选项(Text availability)中点击”free all text”；如只要看综述文献，就在左边Article types下面选择”Review”，即只看综述类型的文献。<blockquote><p>一般新手需要通过看综述来快速了解某个领域的研究现状。</p></blockquote></li><li>使用布尔(boolean) 运算符查询 (大写AND, OR, NOT)<br>如果蛋白或基因有多个别名或曾用名，比如P53，就可以写成“P53 OR TRP53 OR TP53”，这样搜索结果的完整性可大大提高。更多的检索条件可以通过逻辑运算符构建表达式，如“P53 AND Cancer AND (Science[TA] OR Nature[TA])”，这个表达式的意思是搜索发表在Science和Nature上的带有P53和Cancer关键字的文献。</li></ul><h2 id="二、中文文献"><a href="#二、中文文献" class="headerlink" title="二、中文文献"></a>二、中文文献</h2><p>中文文献检索建议使用中国知网CNKI(www.cnki.net)。目前CNKI网络数据库是国内最大的，使用最广泛的中文文献数据库，其中有大量的期刊、学位论文等，基本覆盖你想找的中文文献。在校学生检索文献，一般可以在学校图书馆网站使用CNKI数据库，查找并下载文献全文。<br>最后推荐一下CNKI的专业英文翻译工具：<strong>翻译助手</strong>(<a href="http://dict.cnki.net/)。" target="_blank" rel="noopener">http://dict.cnki.net/)。</a><br>CNKI上的词汇均出于学术期刊，大多可以追溯到文献原文，可以帮助搜索一些专业术语。但要注意，由于例句来至国内期刊的英文摘要，要警惕某些Chinglish的表达方式。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;科研似乎是比较高大上的词，但英文“research”更能表达它的意思，就是反复(re)搜索(search)文献。大牛牛顿都说他的成功是站在巨人的肩膀上(Stand on the shoulders of giants)。从事科研都要先查文献，看看别人做了什么或先学习怎么做，运气好的，如获诺奖的菁蒿素就是屠youyou从我国传统医学文化宝库的古籍堆里找到的秘方，才被提取用于疟疾的治疗。&lt;br&gt;
    
    </summary>
    
      <category term="Bioinformatics" scheme="http://blog.ligene.cn/categories/Bioinformatics/"/>
    
    
      <category term="PubMed" scheme="http://blog.ligene.cn/tags/PubMed/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.04LTS安装QIIME</title>
    <link href="http://blog.ligene.cn/2017/09/03/qiime-install/"/>
    <id>http://blog.ligene.cn/2017/09/03/qiime-install/</id>
    <published>2017-09-03T06:55:56.000Z</published>
    <updated>2017-09-03T06:04:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ubuntu 16.04LTS安装QIIME</p><ol><li><p>构建Ubuntu环境<br>Linux已内置python且version&gt;2.7，需安装其余必备软件包，版本验证 python –version。<br>$sudo apt-get install build-essential python-dev python-pip</p><a id="more"></a></li><li><p>安装QIIME(base install)<br>使用阿里云镜像安装pip软件包，可大幅提高下载速度，只需在命令后加：<br>-i <a href="http://mirrors.aliyun.com/pypi/simple" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple</a> –trusted-host mirrors.aliyun.com<br>$sudo pip install numpy==1.10.0<br>$sudo pip install ipython==5.4.1<br>$sudo pip install qiime  -i <a href="http://mirrors.aliyun.com/pypi/simple" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple</a> –trusted-host mirrors.aliyun.com<br>等待安装完成。<br>安装时，如提示升级pip：<br>$sudo pip install –upgrade pip -i <a href="http://mirrors.aliyun.com/pypi/simple" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple</a> –trusted-host mirrors.aliyun.com</p></li><li>检测安装问题<br>安装完成后：<br>$print_qiime_config.py -t<br>有提示错误，按提示再安装：<br>$sudo apt-get install python-tk<br>后显示正常了。</li><li>安装R<br>$sudo apt-get install r-base r-base-dev<br>$sudo R<blockquote><p>install.packages(‘vegan’)<br>install.packages(‘RColorBrewer’)<br>install.packages(‘ape’)<br>source(“<a href="http://bioconductor.org/biocLite.R" target="_blank" rel="noopener">http://bioconductor.org/biocLite.R</a>“)<br>biocLite(“metagenomeSeq”)<br>其它第三方软件还有待安装。。。</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ubuntu 16.04LTS安装QIIME&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;构建Ubuntu环境&lt;br&gt;Linux已内置python且version&amp;gt;2.7，需安装其余必备软件包，版本验证 python –version。&lt;br&gt;$sudo apt-get install build-essential python-dev python-pip&lt;/p&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://blog.ligene.cn/categories/Tools/"/>
    
    
      <category term="qiime" scheme="http://blog.ligene.cn/tags/qiime/"/>
    
  </entry>
  
  <entry>
    <title>数据分析的多重检验问题(multiple testing)</title>
    <link href="http://blog.ligene.cn/2017/08/26/multiple-testing/"/>
    <id>http://blog.ligene.cn/2017/08/26/multiple-testing/</id>
    <published>2017-08-26T01:31:37.000Z</published>
    <updated>2017-08-26T00:35:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据分析中常碰见多重检验问题(multiple testing).<br>Benjamini于1995年提出一种方法,通过控制FDR(False Discovery Rate)来决定P值的域值. 假设你挑选了R个差异表达的基因，其中有S个是真正有差异表达的，另外有V个其实是没有差异表达的，是假阳性的.实践中希望错误比例Q＝V/R平均而言不能超过某个预先设定的值（比如0.05），在统计学上，这也就等价于控制FDR不能超过5％.<br><a id="more"></a><br>根据Benjamini在他的文章中所证明的定理，控制fdr的步骤实际上非常简单。<br>设总共有m个候选基因，每个基因对应的p值从小到大排列分别是p(1),p(2),…,p(m),则若想控制fdr不能超过q，则只需找到最大的正整数i，使得 p(i)&lt;= (i*q)/m.然后，挑选对应p(1),p(2),…,p(i)的基因做为差异表达基因，这样就能从统计学上保证fdr不超过q。<br>The False Discovery Rate (FDR) of a set of predictions is the expected percent of false predictions in the set of predictions. For example if the algorithm returns 100 genes with a false discovery rate of .3 then we should expect 70 of them to be correct.<br>The FDR is very different from a p-value, and as such a much higher FDR can be tolerated than with a p-value. In the example above a set of 100 predictions of which 70 are correct might be very useful, especially if there are thousands of genes on the array most of which are not differentially expressed. In contrast p-value of .3 is generally unacceptabe in any circumstance. Meanwhile an FDR of as high as .5 or even higher might be quite meaningful.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据分析中常碰见多重检验问题(multiple testing).&lt;br&gt;Benjamini于1995年提出一种方法,通过控制FDR(False Discovery Rate)来决定P值的域值. 假设你挑选了R个差异表达的基因，其中有S个是真正有差异表达的，另外有V个其实是没有差异表达的，是假阳性的.实践中希望错误比例Q＝V/R平均而言不能超过某个预先设定的值（比如0.05），在统计学上，这也就等价于控制FDR不能超过5％.&lt;br&gt;
    
    </summary>
    
      <category term="Statistics" scheme="http://blog.ligene.cn/categories/Statistics/"/>
    
    
      <category term="FDR" scheme="http://blog.ligene.cn/tags/FDR/"/>
    
  </entry>
  
  <entry>
    <title>Javascript-based bioinformatics</title>
    <link href="http://blog.ligene.cn/2017/08/26/binfo-JS/"/>
    <id>http://blog.ligene.cn/2017/08/26/binfo-JS/</id>
    <published>2017-08-26T01:17:43.000Z</published>
    <updated>2017-08-26T00:40:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>A guru of biostar.org predict the future of bioinformatics will need Javascript programming.<br><a id="more"></a></p><blockquote><p>the move into a “cloud” based environments like amazon EC2/app-engine and a more simplified operating systems such as chromeOS and android/iOS, will completely change the way people think about programming. So I predict that bioinformatics in the future will be carried out on a cluster of thousands of computers in the cloud, bundled together on the internet. The bioinformatic programming will be based mainly on using web-services and web-applications. These new concept will make a javascript-based bioinformatics very useful.<br>I know that it is sound crazy now, but in 2-3 years I predict that most people will want to perform their bioinfo analysis with their iPhone/iPad/netbook computers, doing a data-intensive tasks online, without buying expensive hardware.</p></blockquote><p>I am dreaming on developing such an environment, and will work on it soon - an app-engine/jquery based bioinformatics platorm.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A guru of biostar.org predict the future of bioinformatics will need Javascript programming.&lt;br&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://blog.ligene.cn/categories/Programming/"/>
    
    
      <category term="Javascript" scheme="http://blog.ligene.cn/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Microbiome visualization</title>
    <link href="http://blog.ligene.cn/2017/07/20/Microbiome-visualization/"/>
    <id>http://blog.ligene.cn/2017/07/20/Microbiome-visualization/</id>
    <published>2017-07-20T09:15:05.000Z</published>
    <updated>2017-09-03T06:06:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间让朋友帮我做了一个微生物组小项目的网页(Saliva microbiome visualization)，像是一个入口，通往生物科技的远方。<br>特纪念一下。<br><a id="more"></a><br><img src="/downloads/microbiome_vis.jpg" alt="Saliva microbiome visualization"><br>我07年在芝加哥大学学习的时候，开始做酵母基因组的研究。这10年时间,几乎靠一人之力做黄酒酵母基因组，还好得到了两个国家基金的资助，勉强算做成(完)了:(‘。从17年开始，我打算做微生物与健康相关方面的研究，期望后面10年能有一点小成就。::O:</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间让朋友帮我做了一个微生物组小项目的网页(Saliva microbiome visualization)，像是一个入口，通往生物科技的远方。&lt;br&gt;特纪念一下。&lt;br&gt;
    
    </summary>
    
      <category term="Genomics" scheme="http://blog.ligene.cn/categories/Genomics/"/>
    
    
      <category term="Web" scheme="http://blog.ligene.cn/tags/Web/"/>
    
      <category term="Microbiome" scheme="http://blog.ligene.cn/tags/Microbiome/"/>
    
  </entry>
  
  <entry>
    <title>Mapping contigs onto reference genome</title>
    <link href="http://blog.ligene.cn/2017/07/13/mapping-contigs/"/>
    <id>http://blog.ligene.cn/2017/07/13/mapping-contigs/</id>
    <published>2017-07-13T00:40:17.000Z</published>
    <updated>2017-09-03T06:01:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>基因组组装会得到许多contigs，一般需要将它们比对到参考基因组序列，以确定contigs在染色体的位置。<br>参考基因组可以用亲缘关系很近的物种序列，例如同一个物种的不同菌株测序，可以用该种模式菌株的基因组序列作为reference sequence。<br><a id="more"></a></p><h2 id="1-Mapping-contigs-onto-reference-genome"><a href="#1-Mapping-contigs-onto-reference-genome" class="headerlink" title="1. Mapping contigs onto reference genome"></a>1. Mapping contigs onto reference genome</h2><h3 id="1-1-Make-the-BLAST-database-with-the-reference-genome"><a href="#1-1-Make-the-BLAST-database-with-the-reference-genome" class="headerlink" title="1.1 Make the BLAST database with the reference genome"></a>1.1 Make the BLAST database with the reference genome</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$makeblastdb -in reference.fasta -dbtype nucl -parse_seqids -out ref_db</span><br><span class="line">$blastdbcmd -db ref_db -info</span><br></pre></td></tr></table></figure><h3 id="1-2-Run-the-BLAST-query-with-contigs"><a href="#1-2-Run-the-BLAST-query-with-contigs" class="headerlink" title="1.2 Run the BLAST query with contigs"></a>1.2 Run the BLAST query with contigs</h3><p>$ blastn -task blastn -query contigs.fasta -db ref_db -parse_deflines  -evalue 0.0001 -outfmt 6 -out blast.tab </p><h3 id="1-3-Convert-BLAST-tabular-format-into-BED-format"><a href="#1-3-Convert-BLAST-tabular-format-into-BED-format" class="headerlink" title="1.3 Convert BLAST tabular format into BED format"></a>1.3 Convert BLAST tabular format into BED format</h3><p>BED format is a format that IGV can accept. You need to have a few column in this file format:</p><blockquote><p>“chrom start end name score, ….”<br>These fields are already present in the BLAST tabular format result:<br>‘qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore’<br>To convert to BED format, assuming query is your contigs and subject is the reference:<br>“subjectID, subjectStart - 1,  subjectEnd, queryID:queryStart-queryEnd”<br>Note: </p><ol><li>you might need to swap subjectStart and subjectEnd, depending on which one is larger.</li><li>use tab instead of comma in the final BED file.</li></ol></blockquote><h3 id="1-4-Visualization-with-IGV"><a href="#1-4-Visualization-with-IGV" class="headerlink" title="1.4 Visualization with IGV"></a>1.4 Visualization with IGV</h3><p>The final BED file can be visualized with IGV.</p><hr><h2 id="2-最新版BLAST-支持直接用IGV显示"><a href="#2-最新版BLAST-支持直接用IGV显示" class="headerlink" title="2. 最新版BLAST+支持直接用IGV显示"></a>2. 最新版BLAST+支持直接用IGV显示</h2><ul><li><p>最新版blastn支持SAM output format：<strong>-outfmt 17</strong><br>参见：NCBI working on SAM output from BLAST+ (<a href="https://blastedbio.blogspot.com/2015/07/ncbi-working-on-sam-output-from-blast.html" target="_blank" rel="noopener">https://blastedbio.blogspot.com/2015/07/ncbi-working-on-sam-output-from-blast.html</a>)</p></li><li><p>但输出SAM格式还有一个问题，Query name不能被输出到sam文件对应的序列。<br>可以通过 -parse_deflines来解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$makeblastdb -dbtype nucl -in contigseq.fasta -parse_seqids -out testdb</span><br><span class="line">$blastn -query genomeseq.fasta -parse_deflines -db testdb -evalue 0.0001 -outfmt 17 -out test.sam</span><br></pre></td></tr></table></figure></li></ul><p>注意：这里<strong>query是reference序列文件，而subject是contigs序列</strong>， 所以需要用contigs序列建库，与前面tabular format的过程相反。</p><ul><li>输出文件test.sam可直接导入IGV中观察两基因组的比对情况。<br>  IGV需要以这里的genomeseq.fasta做为reference genome (Genomes-&gt;Create .genome file…).</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基因组组装会得到许多contigs，一般需要将它们比对到参考基因组序列，以确定contigs在染色体的位置。&lt;br&gt;参考基因组可以用亲缘关系很近的物种序列，例如同一个物种的不同菌株测序，可以用该种模式菌株的基因组序列作为reference sequence。&lt;br&gt;
    
    </summary>
    
      <category term="Genomics" scheme="http://blog.ligene.cn/categories/Genomics/"/>
    
    
      <category term="BLAST" scheme="http://blog.ligene.cn/tags/BLAST/"/>
    
      <category term="IGV" scheme="http://blog.ligene.cn/tags/IGV/"/>
    
  </entry>
  
  <entry>
    <title>BLAST+使用教程</title>
    <link href="http://blog.ligene.cn/2017/07/05/BLAST-Tutorial/"/>
    <id>http://blog.ligene.cn/2017/07/05/BLAST-Tutorial/</id>
    <published>2017-07-05T05:39:37.000Z</published>
    <updated>2017-07-12T23:49:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux下最新版BLAST+的本地化安装与基本使用用法。<br>BLAST的更详细使用方法可参考BLAST手册《BLAST Command Line Applications User Manual》，网址：<a href="http://www.ncbi.nlm.nih.gov/books/NBK279690/" target="_blank" rel="noopener">http://www.ncbi.nlm.nih.gov/books/NBK279690/</a><br><a id="more"></a></p><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h2><p>从NCBI网址下载最新版BLAST程序：ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/<br>根据自己的操作系统选择相应的BLAST可执行程序，如Ubuntu 12.04(64位)系统就下载：<br>$wget ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.6.0+-x64-linux.tar.gz</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><ul><li>解压缩：<br>$tar -zxvf ncbi-blast-2.6.0+-x64-linux.tar.gz</li><li>移动到本地安装目录（不带版本号，避免因升级而修改配置文件）<br>$sudo mv ncbi-blast-2.6.0+/  /opt/blast</li><li>将BLAST+可执行程序所在目录（bin）的绝对路径加入到环境变量$PATH中，方便通过程序名直接调用。<br>编辑~/.bashrc文件，在最后加入bin目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;export PATH=/opt/blast/bin:\$PATH&quot; &gt;&gt; ~/.bashrc    </span><br><span class="line">source ~/.bashrc  #让配置生效</span><br><span class="line">blastn -version  #显示版本</span><br></pre></td></tr></table></figure></li></ul><p>如果显示版本正确，安装成功。</p><h2 id="3-配置本地BLAST库"><a href="#3-配置本地BLAST库" class="headerlink" title="3.配置本地BLAST库"></a>3.配置本地BLAST库</h2><ul><li><p>安装目录/opt/blast下新建一个文件夹，命名为db 。<br>$mkdir /opt/blast/blastdb</p></li><li><p>在用户home目录下新建一个文件.ncbirc（文件名是以点号开头）。<br>$vi ~/.ncbirc<br>在文件中添加内容：<br>[BLAST]<br>BLASTDB=/opt/blast/blastdb</p></li></ul><p>配置好后，以后做BLAST选择库的时候就可以只输入名称（比如nr），不用输入绝对路径了。</p><h2 id="4-基本用法"><a href="#4-基本用法" class="headerlink" title="4.基本用法"></a>4.基本用法</h2><p>BLAST程序执行前要先准备查找目标序列(Subject)的数据库，BLAST程序需要有特定格式数据库才能进行搜索，所以要先格式化序列数据库；也可以直接从NCBI下载已经格式化好的数据库，如NT, NR数据库等。然后根据查询序列(Query)为蛋白质或核酸序列选择相应BLAST程序，如blastp或blastn等搜索相似序列。</p><h3 id="4-1-格式化序列数据库"><a href="#4-1-格式化序列数据库" class="headerlink" title="4.1 格式化序列数据库"></a>4.1 格式化序列数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$makeblastdb -in db.fasta -dbtype nucl -parse_seqids -out dbname</span><br><span class="line">参数说明:</span><br><span class="line">-in：待格式化的序列文件</span><br><span class="line">-dbtype：数据库类型，prot或nucl</span><br><span class="line">-out：数据库名</span><br></pre></td></tr></table></figure><p>如果该库需要经常使用，可将库文件移到前面配置的库文件的目录，今后在其它目录运行blast的时候，便可直接输入库名（不用输入绝对路径），直接使用。<br>$mv dbname.* /opt/blast/blastdb</p><h3 id="4-2-运行BLAST程序"><a href="#4-2-运行BLAST程序" class="headerlink" title="4.2 运行BLAST程序"></a>4.2 运行BLAST程序</h3><ul><li>以核酸序列比对核酸数据库（blastn）为例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$blastn -query seq.fasta -out seq.blast -db dbname -outfmt 6 -evalue 1e-5 -num_descriptions 10 -num_threads 8</span><br><span class="line">参数说明:</span><br><span class="line">-query： 输入文件路径及文件名</span><br><span class="line">-out：输出文件路径及文件名</span><br><span class="line">-db：格式化了的数据库路径及数据库名</span><br><span class="line">-outfmt：输出文件格式，总共有17种格式，6是tabular格式（对应BLAST的m8格式），最新版BLAST+的17是sam格式。</span><br><span class="line">-evalue：设置输出结果的e-value值</span><br><span class="line">-num_descriptions：tabular格式输出结果的条数</span><br><span class="line">-num_threads：线程数</span><br></pre></td></tr></table></figure></li></ul><p>更多参数信息可直接输入blastn -help查阅。</p><ul><li><p>Blastn程序的default value为magablast。Megablast 是在intra-species或者very closely related species中使用的blast版本，其特点是word_size较大（默认值为28bp），这样就可以在initial match过程排除掉很多情况，从而加快比对速度。而对于inter-species的两个较短片段就无法搜寻到结果，这种情况可以增加 –task blastn，就一切正常了。</p></li><li><p>新BLAST+中最拉风的功能是直接控制输出格式，如：-outfmt format “7 qacc sacc evalue length pident”<br>7表示带注释行的tab格式的输出，可以自定义要输出哪些内容，用空格分格跟在7的后面，并把所有的输出控制用双引号括起来，其中qacc查询序列的acc,sacc表示目标序列的acc，evalue即是e值，length即是匹配的长度，pident即是序列相同的百分比。其他可用的选项参见最后。</p></li><li><p>其它程序，如蛋白序列比对蛋白数据库（blastp）以及核酸序列比对蛋白数据库（blastx）等，用法与blastn类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">blastp -query seq.fasta -out seq.blast -db dbname -outfmt 6 -evalue 1e-5 -num_descriptions 10 -num_threads 8</span><br><span class="line">blastx -query seq.fasta -out seq.blast -db dbname -outfmt 6 -evalue 1e-5 -num_descriptions 10 -num_threads 8</span><br></pre></td></tr></table></figure></li></ul><p>完整的参数说明可以用-help查询。</p><h3 id="4-3-也可以直接下载NCBI已经格式化好的库-NCBI-curated-database-，直接在本地库中比对，以蛋白质库nr为例："><a href="#4-3-也可以直接下载NCBI已经格式化好的库-NCBI-curated-database-，直接在本地库中比对，以蛋白质库nr为例：" class="headerlink" title="4.3 也可以直接下载NCBI已经格式化好的库(NCBI-curated database)，直接在本地库中比对，以蛋白质库nr为例："></a>4.3 也可以直接下载NCBI已经格式化好的库(NCBI-curated database)，直接在本地库中比对，以蛋白质库nr为例：</h3><ul><li><p>下载库可使用BLAST+自带的update_blastdb.pl脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/blast/blastdb/ #切换到本地BLAST库目录</span><br><span class="line">update_blastdb.pl  nr</span><br><span class="line">tar -xzvf *.gz</span><br><span class="line">rm *.gz*  #删除下载的文件</span><br><span class="line">blastp -db nr -query somesequence.fasta</span><br></pre></td></tr></table></figure></li><li><p>如果没有下载本地化nr库，可添加-remote选项，进行在线比对（就不能使用-num_threads参数了），但速度慢一些，适合序列不多的情况。</p></li></ul><hr><blockquote><p>Formatting options<br>-outfmt <string><br>alignment view options:<br>0 = Pairwise,<br>1 = Query-anchored showing identities,<br>2 = Query-anchored no identities,<br>3 = Flat query-anchored showing identities,<br>4 = Flat query-anchored no identities,<br>5 = BLAST XML,<br>6 = Tabular,<br>7 = Tabular with comment lines,<br>8 = Seqalign (Text ASN.1),<br>9 = Seqalign (Binary ASN.1),<br>10 = Comma-separated values,<br>11 = BLAST archive (ASN.1),<br>12 = Seqalign (JSON),<br>13 = Multiple-file BLAST JSON,<br>14 = Multiple-file BLAST XML2,<br>15 = Single-file BLAST JSON,<br>16 = Single-file BLAST XML2,<br>17 = Sequence Alignment/Map (SAM),<br>18 = Organism Report<br>Options 6, 7, and 10 can be additionally configured to produce<br>a custom format specified by space delimited format specifiers.<br>The supported format specifiers are:<br>qseqid means Query Seq-id<br>qgi means Query GI<br>qacc means Query accesion<br>qaccver means Query accesion.version<br>qlen means Query sequence length<br>sseqid means Subject Seq-id<br>sallseqid means All subject Seq-id(s), separated by a ‘;’<br>sgi means Subject GI<br>sallgi means All subject GIs<br>sacc means Subject accession<br>saccver means Subject accession.version<br>sallacc means All subject accessions<br>slen means Subject sequence length<br>qstart means Start of alignment in query<br>qend means End of alignment in query<br>sstart means Start of alignment in subject<br>send means End of alignment in subject<br>qseq means Aligned part of query sequence<br>sseq means Aligned part of subject sequence<br>evalue means Expect value<br>bitscore means Bit score<br>score means Raw score<br>length means Alignment length<br>pident means Percentage of identical matches<br>nident means Number of identical matches<br>mismatch means Number of mismatches<br>positive means Number of positive-scoring matches<br>gapopen means Number of gap openings<br>gaps means Total number of gaps<br>ppos means Percentage of positive-scoring matches<br>frames means Query and subject frames separated by a ‘/‘<br>qframe means Query frame<br>sframe means Subject frame<br>btop means Blast traceback operations (BTOP)<br>staxids means unique Subject Taxonomy ID(s), separated by a ‘;’<br>(in numerical order)<br>sscinames means unique Subject Scientific Name(s), separated by a ‘;’<br>scomnames means unique Subject Common Name(s), separated by a ‘;’<br>sblastnames means unique Subject Blast Name(s), separated by a ‘;’<br>(in alphabetical order)<br>sskingdoms means unique Subject Super Kingdom(s), separated by a ‘;’<br>(in alphabetical order)<br>stitle means Subject Title<br>salltitles means All Subject Title(s), separated by a ‘&lt;&gt;’<br>sstrand means Subject Strand<br>qcovs means Query Coverage Per Subject<br>qcovhsp means Query Coverage Per HSP<br>When not provided, the default value is:<br>‘qseqid sseqid pident length mismatch gapopen qstart qend sstart send<br>evalue bitscore’, which is equivalent to the keyword ‘std’<br>Default = `0’</string></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux下最新版BLAST+的本地化安装与基本使用用法。&lt;br&gt;BLAST的更详细使用方法可参考BLAST手册《BLAST Command Line Applications User Manual》，网址：&lt;a href=&quot;http://www.ncbi.nlm.nih.gov/books/NBK279690/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.ncbi.nlm.nih.gov/books/NBK279690/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Bioinformatics" scheme="http://blog.ligene.cn/categories/Bioinformatics/"/>
    
    
      <category term="BLAST" scheme="http://blog.ligene.cn/tags/BLAST/"/>
    
      <category term="IGV" scheme="http://blog.ligene.cn/tags/IGV/"/>
    
  </entry>
  
  <entry>
    <title>Notepad2代替Windows记事本</title>
    <link href="http://blog.ligene.cn/2017/07/04/notepad2/"/>
    <id>http://blog.ligene.cn/2017/07/04/notepad2/</id>
    <published>2017-07-04T13:31:15.000Z</published>
    <updated>2017-07-13T00:42:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Windows记事本的功能比较弱，有时不能胜任文本数据处理，如打开大文件会很慢、不能识别Linux系统的换行符等。<br>Notepad2是一款优秀的<strong>轻量级文本编辑器</strong>，而Notepad2-mod又增强了一些功能，如语法高亮、代码折叠、自动代替Windows记事本等。<br>修改版的下载地址：<a href="https://xhmikosr.github.io/notepad2-mod/" target="_blank" rel="noopener">https://xhmikosr.github.io/notepad2-mod/</a><br><a id="more"></a></p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p>安装过程中注意选上：“Replace Windows notepad with Notepad2-mod”(下图),将自动代替Windows自带的记事本。<br><img src="/downloads/notepad2_setup.png" alt="Notepad2 Setup"></p><h3 id="2-添加Notepad2到右键菜单，方便右键直接打开文档"><a href="#2-添加Notepad2到右键菜单，方便右键直接打开文档" class="headerlink" title="2.添加Notepad2到右键菜单，方便右键直接打开文档:"></a>2.添加Notepad2到右键菜单，方便右键直接打开文档:</h3><p>把以下内容拷到任意以.reg为后缀的文件（如notepad2_shortcut.reg），后运行导入系统注册表即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"> </span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\Notepad2]</span><br><span class="line"> </span><br><span class="line">[HKEY_CLASSES_ROOT\*\shell\Notepad2\command]</span><br><span class="line">@=&quot;\&quot;C:\\Program Files\\Notepad2\\Notepad2.exe\&quot; \&quot;%1\&quot;&quot;</span><br></pre></td></tr></table></figure></p><h3 id="3-简单配置"><a href="#3-简单配置" class="headerlink" title="3.简单配置"></a>3.简单配置</h3><ul><li>View菜单，不要勾选“Long Line Marker”, “Code Folding”。</li><li>Settings菜单，勾选”Remember Recent Files”。</li><li>File菜单的”Line Endings”可以转换为Windows/Linux/Mac的换行符。</li><li>File菜单的”Encoding”可以设置Default编码为”UTF-8”。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows记事本的功能比较弱，有时不能胜任文本数据处理，如打开大文件会很慢、不能识别Linux系统的换行符等。&lt;br&gt;Notepad2是一款优秀的&lt;strong&gt;轻量级文本编辑器&lt;/strong&gt;，而Notepad2-mod又增强了一些功能，如语法高亮、代码折叠、自动代替Windows记事本等。&lt;br&gt;修改版的下载地址：&lt;a href=&quot;https://xhmikosr.github.io/notepad2-mod/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xhmikosr.github.io/notepad2-mod/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://blog.ligene.cn/categories/Tools/"/>
    
    
      <category term="Notepad" scheme="http://blog.ligene.cn/tags/Notepad/"/>
    
  </entry>
  
  <entry>
    <title>基于GitHub和Hexo搭建个人博客</title>
    <link href="http://blog.ligene.cn/2017/06/25/firstBlog/"/>
    <id>http://blog.ligene.cn/2017/06/25/firstBlog/</id>
    <published>2017-06-25T06:39:02.000Z</published>
    <updated>2018-01-03T01:10:55.341Z</updated>
    
    <content type="html"><![CDATA[<p>第一篇博文，记录此博客的搭建过程。<br><a id="more"></a></p><ol><li><p>Git<br>sudo apt-get install git -y</p></li><li><p>NodeJS<br>curl -sL <a href="https://deb.nodesource.com/setup_9.x" target="_blank" rel="noopener">https://deb.nodesource.com/setup_9.x</a> | sudo -E bash -<br>sudo apt-get install nodejs</p></li><li><p>Hexo<br>sudo npm install hexo-cli -g<br>//hexo-cli是hexo的命令行模式, CLI=Command Line Interface<br>hexo –version #v1.0.4</p></li></ol><p><strong>hexo中所有文件的编码格式均是UTF-8</strong>，不然中文显示会有问题，可以通过Notepad2的File菜单中的Encoding选择UTF-8.</p><ol><li>GitHub<br>ssh-keygen -t rsa -C “youdng@hotmail.com”<br>//登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容<br>ssh -T git@github.com<br>git config –global user.name “adong77”<br>git config –global user.email “youdng@hotmail.com”</li></ol><h1 id="WSL"><a href="#WSL" class="headerlink" title="WSL"></a>WSL</h1><p> cd /mnt/c/<br> hexo init Hexo  //其中 Hexo 是自己定义的博客根目录名称，如hexo init myblog<br> cd Hexo/<br><strong>后面安装hexo组件,写博客文章等命令都需要在此目录下进行!</strong></p><p>#Hexo组件：<br> sudo npm install hexo-deployer-git –save<br> //可使用命令hexo d 部署到github上<br> sudo npm install hexo-server –save<br> sudo npm install hexo-generator-sitemap –save<br> sudo npm install hexo-generator-feed –save</p><h1 id="theme"><a href="#theme" class="headerlink" title="theme"></a>theme</h1><p>$ git clone <a href="https://github.com/tufu9441/maupassant-hexo.git" target="_blank" rel="noopener">https://github.com/tufu9441/maupassant-hexo.git</a> themes/maupassant<br>$ npm install hexo-renderer-pug –save<br>$ npm install hexo-renderer-sass –save</p><h1 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h1><p>去阿里云买了这个域名www.ligene.cn，我以blog.ligene.cn作为博客的域名。<br>博客托管在github上的域名是：adong77.github.io，所以建一个CNAME记录，将blog.ligene.cn解析到adong77.github.io。<br>DNS域名解析最常用的是A记录和CNAME记录，A记录把域名解析到服务器IP，CNAME相当于把一个域名指向另一个域名，因此我这个用的是CNAME，要是托管的服务器也是自己搭的那就用A记录了。<br>完事之后得等一段时间,使用下面的命令测一下域名的解析:<br>$ dig blog.sunnyxx.com +nostats +nocomments +nocmd<br>=&gt; output:<br>;; global options: +cmd<br>;blog.ligene.cn.      IN  A<br>blog.ligene.cn.   600    IN  CNAME   adong77.github.io.<br>adong77.github.io.  1468    IN  CNAME   github.map.fastly.net.<br>github.map.fastly.net.  19  IN  A   103.245.222.133<br>这说明是成功了。</p><p>在blog的source目录下建一个CNAME文件，里面写最终指向的域名：blog.ligene.cn。<br>这样第次更新都会保留CNAME文件。</p><h1 id="文章中插入图片"><a href="#文章中插入图片" class="headerlink" title="文章中插入图片"></a>文章中插入图片</h1><p>把图片与*.md文件放在一起，用这种方式插入图片：<br><code>![](gmail.png)</code><br>如果不想放在同一层级,那么就可以这样插入:<br><code>![](foldername/1.png)</code><br>表示引用同层级一个叫做”foldername”文件夹中的1.png图片.</p><h1 id="添加网易云跟贴评论"><a href="#添加网易云跟贴评论" class="headerlink" title="添加网易云跟贴评论"></a>添加网易云跟贴评论</h1><p>修改themes\light\layout_partial下的comment.ejs文件（我用的是light主题）,在下面代码后<br>&lt;% if (page.comments){ %&gt;<br>添加跟贴完整模块代码(Web单独版)</p><h1 id="修改googleapi为sinaapp"><a href="#修改googleapi为sinaapp" class="headerlink" title="修改googleapi为sinaapp"></a>修改googleapi为sinaapp</h1><p>由于众所周知的原因，google服务在某地区受阻，导致网页加载较慢。</p><p>解决方案：</p><h2 id="googleapi-font"><a href="#googleapi-font" class="headerlink" title="googleapi font"></a>googleapi font</h2><p>在hexo\themes.…\source\css_base\variable.styl中，注释掉这句：<br>    //@import url(“<a href="https://fonts.googleapis.com/css?family=Droid+Serif:400italic,700italic,400,700" target="_blank" rel="noopener">https://fonts.googleapis.com/css?family=Droid+Serif:400italic,700italic,400,700</a>“)<br>之后页面会直接加载网站下的：<br>    <a href="http://ibruce.info/css/fonts/fontawesome-webfont.eot" target="_blank" rel="noopener">http://ibruce.info/css/fonts/fontawesome-webfont.eot</a>  </p><h2 id="google-jquery"><a href="#google-jquery" class="headerlink" title="google jquery"></a>google jquery</h2><p>在hexo\themes.…\layout_partial\after_footer.ejs(或者index.ejs等)中将<br><code>&lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js&quot;&gt;&lt;/script&gt;</code><br>修改为<br><code>&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</code><br>即可。</p><p>作者：王奥(OX)<br>链接：<a href="https://www.zhihu.com/question/24422335/answer/45424856" target="_blank" rel="noopener">https://www.zhihu.com/question/24422335/answer/45424856</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h2 id="内容发布"><a href="#内容发布" class="headerlink" title="内容发布"></a>内容发布</h2><h3 id="修改post预设格式"><a href="#修改post预设格式" class="headerlink" title="修改post预设格式"></a>修改post预设格式</h3><blockquote><p>建议按照个人习惯修改<code>hexo\scaffolds</code>中的<code>post.md</code></p></blockquote><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">description:</span><br></pre></td></tr></table></figure><h3 id="生成文章"><a href="#生成文章" class="headerlink" title="生成文章"></a>生成文章</h3><blockquote><p>文章如含有有中文请修改编码为<code>UTF-8</code>避免乱码</p></blockquote><p>1.命令生成初始文章，文件名空格会自动加<code>-</code>hyphen中横线</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">"hexo post"</span></span><br></pre></td></tr></table></figure><p>2.在<code>hexo\source\_posts</code>中编辑生成出来的<code>hexo-post</code>文件</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: hexo post #可以改成中文的，如“新文章”</span><br><span class="line">date: 2015-01-14 21:31:42 #发表日期，可自定义修改排序</span><br><span class="line">categories: blog #文章文类</span><br><span class="line">tags: [博客,文章] #文章标签，可以加入多标签</span><br><span class="line">---</span><br><span class="line"><span class="section">#这里是正文，用Markdown书写</span></span><br></pre></td></tr></table></figure><p>3.本地预览文章内容，登录<code>localhost:4000</code>查看效果<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p>4.发布内容到<code>public</code>文件夹，然后我选择手动复制同步到GitHub<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure></p><h3 id="导航栏添加自定义页面"><a href="#导航栏添加自定义页面" class="headerlink" title="导航栏添加自定义页面"></a>导航栏添加自定义页面</h3><p>1.命令手动生成自定义页面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n page <span class="string">"about"</span></span><br></pre></td></tr></table></figure></p><p>2.编辑<code>hexo/source/about/index.md</code>内容<br>3.修改<code>themes/jacman/_config.yml</code>文件<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">关于: /about</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一篇博文，记录此博客的搭建过程。&lt;br&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://blog.ligene.cn/categories/Tools/"/>
    
    
      <category term="GitHub" scheme="http://blog.ligene.cn/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://blog.ligene.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
